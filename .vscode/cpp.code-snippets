{
  // Place your contest-training workspace snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and
  // description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope
  // is left empty or omitted, the snippet gets applied to all languages. The prefix is what is
  // used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
  // $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders.
  // Placeholders with the same ids are connected.
  // Example:
  // "Print to console": {
  // 	"scope": "javascript,typescript",
  // 	"prefix": "log",
  // 	"body": [
  // 		"console.log('$1');",
  // 		"$2"
  // 	],
  // 	"description": "Log output to console"
  // }
  "Union Find Disjoint Set": {
    "prefix": "UFDS",
    "body": [
      "class UnionFind {",
      "private:",
      "  vi p;",
      "  vi h;",
      "  int c;",
      "",
      "public:",
      "  UnionFind(int n) {",
      "    p.resize(n);",
      "    h.resize(n, 1);",
      "",
      "    for (int i = 0; i < n; i++)",
      "      p[i] = i;",
      "",
      "    c = n;",
      "  }",
      "",
      "  int find(int e) {",
      "    if (e == p[e])",
      "      return e;",
      "",
      "    return (p[e] = find(p[e]));",
      "  }",
      "",
      "  bool check(int u, int v) {",
      "    int pu = find(u);",
      "    int pv = find(v);",
      "",
      "    return pu == pv;",
      "  }",
      "",
      "  bool join(int u, int v) {",
      "    if (check(u, v)) {",
      "      return false;",
      "    }",
      "",
      "    int pu = find(u);",
      "    int pv = find(v);",
      "",
      "    if (h[pu] < h[pv])",
      "      swap(pu, pv);",
      "",
      "    if (h[pu] == h[pv])",
      "      h[pu]++;",
      "",
      "    p[pv] = pu;",
      "    c--;",
      "    return true;",
      "  }",
      "  int count() { return c; }",
      "};",
      ""
    ],
    "description": "Union Find Disjoint Set"
  }
}
